---
pagetitle: "ETC5512"
subtitle: "Australian census"
author: Kate Saunders
email: "ETC5512.Clayton-x@monash.edu"
date: "Wild Caught Data"
department: "Department of Econometrics and Business Statistics"
unit-url: "wcd.numbat.space"
footer: "ETC5512"
format: 
  revealjs: 
    logo: images/monash-one-line-black-rgb.png
    slide-number: c
    multiplex: false
    theme: ../assets/monash.scss
    show-slide-number: all
    show-notes: false
    controls: true
    width: 1280
    height: 720
    css: [../assets/custom.css, ../assets/lecture-01.css]
    include-after-body: "../assets/after-body.html"
    chalkboard:
      boardmarker-width: 5
      buttons: true
editor: 
  markdown: 
    wrap: 72
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 4,
  fig.align = "center",
  fig.retina = 3,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  cache = FALSE,
  cache.path = "cache/"
)
if(!require(emoji))
  install.packages("emoji")
library(emoji)
```

## <br>[`r rmarkdown::metadata$pagetitle`]{.monash-blue} {#etc5523-title background-image="images/bg-01.png"}

### `r rmarkdown::metadata$subtitle`

Lecturer: *`r rmarkdown::metadata$author`*

`r rmarkdown::metadata$department`

::: tl
<br>

<ul class="fa-ul">

<li><i class="fas fa-envelope"></i>`r rmarkdown::metadata$email`</li>

<li><i class="fas fa-calendar-alt"></i>
`r rmarkdown::metadata$date`</li>

<li><i class="fas fa-globe"></i>
`r rmarkdown::metadata[["unit-url"]]`</li>

</ul>

<br>
:::

## Recall from lecture 2:

:::{.callout-note}
## Realities of data collection

Collecting data on the entire population is normally too expensive or infeasible!  

Therefore, we often can only collect data about a subset of the population.
:::

. . . 

<br><br>
<center>
If we can collect data about the entire population, that is called a [**census**]{.monash-blue}
</center>

<!-- --- slide break --- -->

## {.smaller}    


::::{.columns}
:::{.column width=50%}
[**Sample Advantages**]{.monash-blue} <hr/>

::: incremental 

* Reduces cost
* Timely collection of data

:::

:::
:::{.column width=50%}

[**Census Advantages**]{.monash-blue} <hr/>

::: incremental 

* Data available, even for small geographical areas or subpopulations
* Statistics are not subject to sampling error
* Better accuracy and details

:::

:::
::::

::::{.columns}
:::{.column width=50%}

<br>
[**Sample Disadvantages**]{.monash-blue} <hr/>

::: incremental 

* Lack of data on sub-population (particularly minorities) or small geographical areas
* Requires careful construction of sampling design
* Estimates are subject to sampling error
* The estimates may not be accurate or reliable 
* Estimating and communicating precision of estimates is difficult

:::

:::
:::{.column width=50%}

<br>
[**Census Disadvantages**]{.monash-blue} <hr/>

::: incremental 

* Expensive or infeasible
* Time consuming to collect all data

:::

:::
::::

<!-- --- slide break --- -->

## Today's Lecture      

:::{.callout-note}
## What we'll cover 

Case study data is on the Australian Census! 

We will:

* Learn about what the Australian census is and how the data is collected 

* Learn what data on population demographics are collected

* Learn how the census data is stored and how to access it 

:::

. . . 

:::{.callout-note}
## From a coding perspective

* Learn about organising your data the **tidy data** way. 

* Learn to **manipulate strings** and a bit about regular expressions. 

::: 

# Australian Census {background-color="#006DAE"}

## What is the Australian census? {.smaller}

::::{.columns}
:::{.column width=60%}

:::{.incremental}

* The first Australian census was held in 1911. 
* Since 1961, the census occurs **every 5 years** in Australia  
* The next census is in 2026.
* Counts **every person and household** in Australia.  
*(well almost everyone, the 2021 census had a 96% participation rate but that is very high.)*
* Comprehensive snapshot of the country and **tells the story of how we are changing**. 
* The Australia Bureau of Statistics (ABS) is legislated to collect and disseminate census data under the *ABS Act 1975* and *Census and Statistics Act 1905*. 
* For more details refer to the [ (ABS) Website](https://www.abs.gov.au/census/about-census/australian-census).

:::

:::

:::{.column width=40%}

<img src="images/census-form.png" width = "70%"/>

:::
::::

<!-- --- slide break --- -->

## What is the Australian Bureau of Statistics (ABS)? {.smaller}

::::{.columns}
:::{.column width=70%}

:::{.incremental}
* ABS is the independent statistical agency of the Government of Australia. 
* If you are from outside Australia, find the statistical government agency in your country <i class="fas fa-wrench gray"></i>, e.g. 
  * in 🇯🇵 Japan, this is the [Statistics Bureau of Japan](https://www.stat.go.jp/english/),
  * in 🇨🇳 China, the [National Bureau of Statistics of China](http://www.stats.gov.cn/english/),
  * in 🇮🇳 India, the [Ministry of Statistics and Programme Implementation](https://www.mospi.gov.in/), and
  * in 🇳🇿 New Zealand, the [Statistics New Zealand](https://www.stats.govt.nz/).
* ABS provides key statistics on a wide range of economic, population, environmental and social issues, to assist and encourage informed decision making, research and discussion within governments and the community.

:::

:::

:::{.column width=30%}

<img src="images/Australian_Bureau_of_Statistics_logo.svg"/>

:::
::::

<!-- --- slide break --- -->

## Why do we do a census? {.smaller}

:::{.incremental}
* The census is not cheap to do. The 2021 census **cost of $565 million**. That's roughly $22 per person.
* However the **census provides value for money and it is important**.
* An [independent report](https://www.abs.gov.au/census/about-census/value-census) found that for every `$`1 invested in the Census, `$`6 of value is generated to the Australian economy.
* The census **data tells us about the economic, social and cultural** make-up of the country.
* Need census **data to make decisions and plan for the future** 
* It informs planning for schools, health care, transport and infrastructure. It is also used to help plan local services for individuals, families and communities.
:::

<!-- --- slide break --- -->

## How is the census conducted? {.smaller}

The ABS contacts households in a few different ways:

* **Letters and paper forms are delivered** in some areas
* In other areas, **visits were made to households**
* **Answer online** - That's relatively new!

. . . 

Then households complete the Census form, either submitting it online or sending it back in the mail.

. . . 

**ABS provides a range of supports and resources to help everyone to fill in the census**.  

<br>

. . . 

:::{.callout-tip}
## Break out discussion

Take a moment to think about [**what challenges might arise if you try to survey everyone**]{.monash-blue}.  

*Hint: Think about smaller communities, their sub-groups and their different needs.*
:::


<!-- --- slide break --- -->

## How can we survey everyone? {.smaller}

It is no small task! 

:::{.incremental}
* Resources for people in the deaf/hard of hearing and blind/low vision communities  
*e.g. audio guides and braille information packs*

* To support Aboriginal and Torres Straight Islanders to fill in the census there are urban and regional pop-up hubs. 
*This includes extra face-to-face support*

* For migrants, refugees, and international visitors there are language supports available.

* Additional efforts are made to survey in locations to reach without a fixed address  
*e.g. FIFO workers (Fly in Fly Out), Grey Nomads, People experiencing homelessness.* 

<br />

* More details on the ABS website: [here](https://www.abs.gov.au/census/about-census/2021-census-overview/participation-2021-census)

:::

<!-- --- slide break --- -->

## What is in the census? 

::::{.columns}
:::{.column width=50%}

There are questions about: 

* age
* country of birth
* religion
* ancestry
* language used at home
* work 
* education

:::

:::{.column width=50%}

:::{.callout-tip}

## Breakout Session
Investigate what data is collected in the census.  

Use the quick stats summary for Clayton  [here](https://www.abs.gov.au/census/find-census-data/quickstats/2021/SAL20569). 

*Are there any weird variables, or variables that surprise you? What do you learn about where you live?*

:::

:::

::::

<!-- --- slide break --- -->

## Getting the ABS Census Data 

[https://www.abs.gov.au/census/find-census-data]()

::::{.columns}
:::{.column width=50%}

:::callout-note 
## Data 

There are two main types of data that you can download:

* **DataPacks**  [https://www.abs.gov.au/census/find-census-data/datapacks]() 

* **GeoPackages**  [https://www.abs.gov.au/census/find-census-data/geopackages]()

:::

:::

:::{.column width=50%}

<img src="images/datapack-download.png" width = "100%"/>

:::
::::

<!-- --- slide break --- -->

## Navigating ABS Census data {.smaller}

:::{.incremental}

* DataPacks are only available for the 2011, 2016 and 2021 census.

* ABS aims for **census data to be comparable and compatible with previous censuses**. 

* Questions and classifications are reviewed to reflect changes in the Australian society.  
*e.g. In 2021, ABS did not to ask about home internet connection as people now have other options like mobile devices and that data was no longer considered relevant to society.*

* There are small differences in the available data between years.  
*Variables can be added, updated and removed.*

* There are also sometimes [data corrections](https://www.abs.gov.au/census/guide-census-data/2021-census-data-corrections) at a later date.

* Here are links to:   
[(i) what's new in 2021](https://www.abs.gov.au/census/guide-census-data/census-dictionary/2021/whats-new-2021) - there were 56 new additions!     
[(ii) consultation for changes in 2026](https://www.abs.gov.au/census/2026-census-topic-review/overview-2026-census-topic-review) and   
[(iii) an example of a 2026 proposed change]([https://www.sbs.com.au/news/article/why-more-robust-information-on-australias-sexuality-and-gender-identity-could-be-coming/5iqjqgryj])

:::

<!-- --- slide break --- -->


# Data Structure and what's in it? {background-color="#006DAE"}

<!-- --- slide break --- -->

## Reality of any data analysis

:::{.callout-warning}
## Detective Work


Navigating data and deducing what it is often requires you to do some <b>"detective work"</b> 🕵️‍♀️</li>

:::{.incremental}

* Much like real detective work, **just locating the data and understanding the data variables can take a long time**

* **Cleaning and wrangling of the data is not glamorous**;   
There's far more attention in "catching criminals" / praise for the cool discoveries from statistical analysis.

* [**Let's get delve into 'grunt work' of an analysis with the census data!**]{.monash-blue}

:::

:::

<!-- --- slide break --- -->

## Datapack data structure {.smaller}

::::{.columns}
:::{.column width=65%}

<img src="images/datapack-data-structure.png" width = "100%"/>

:::
:::{.column width=35%}

* The data is nested within folders.  
*Click on the folder name to see folders and files nested within.*
<br><br>

* Preserve the data in the original structure as much as you can!  
*Good practice not to modify the raw data and it's structure*
<br><br>

<center>
[Where do we get started??]{.monash-blue}
</center>

<br><br>
<center>
[What is stored in each of these folders/files??]{.monash-blue}
</center>

:::
::::

<!-- --- slide break --- -->

## Read Me and Meta Data

Download the [2021 Census data](https://www.abs.gov.au/census/find-census-data/datapacks) containing the General Community Profile for all geographies in Victoria. 
<br>

. . . 

Before we jump in, we need some description or understanding of the variables.  

. . . 

[It will be near impossible to extract meaningful information from the data without it.]{.monash-blue}

## Break out

:::{.callout-tip}

## Breakout Session

Then take some time to review the read me and the meta data folders.  

* Which folder contains demographic information about each suburb?  

* What is LGA short for?  

* Where can I find information about how much rent people pay?  

* What is contained in variable G17?  

:::


<!-- --- slide break --- -->

## Table G17

::: callout-note 
## A few things to note:

* There are 201 columns in G17A and G17B and 81 columns in G17C. 

* Perhaps there is an export limitation for a data that contains more than 200 columns, thus it is broken up into different csv files.  

* Which means that you have to join the tables G17A, G17B and G17C as one  
*(you'll do this in the tutorial <i class="fas fa-wrench gray"></i>)*.

::: 

. . . 

:::{.callout-tip}
## Question 

But what does the data look like when you open the file?

:::

<!-- --- slide break --- -->

## Tables G17A-G17C

```{r, echo = F}
dfA <- read.csv(here::here("data/2021Census_G17A_VIC_STE.csv"))
dfB <- read.csv(here::here("data/2021Census_G17B_VIC_STE.csv"))
dfC <- read.csv(here::here("data/2021Census_G17C_VIC_STE.csv"))
```

[2021Census_G17]{.f3 .monash-gray80}A[_VIC_STE.csv]{.monash-gray80 .f3}

```{r, echo = F}
# DT::datatable(dfA,
#               rownames = FALSE, 
#               options = list(lengthChange = FALSE, dom = "t",
#                              pageLength = nrow(dfA),
#                              scrollX = "100px"))
dfA[1,1:3]
```

<br>

[2021Census_G17]{.f3 .monash-gray80}B[_VIC_STE.csv]{.monash-gray80 .f3}

```{r, echo = F}
# DT::datatable(dfB,
#               rownames = FALSE,
#               options = list(lengthChange = FALSE, dom = "t",
#                              scrollX = "100px"))
dfB[1,1:3]
```

<br>

[2021Census_G17]{.f3 .monash-gray80}C[_VIC_STE.csv]{.monash-gray80 .f3}

```{r, echo = F}
# DT::datatable(dfC,
#               rownames = FALSE,
#               options = list(lengthChange = FALSE, dom = "t",
#                              scrollX = "100px"))
dfC[1, 1:3]
```

<!-- --- slide break --- -->

# Tidy Data {background-color="#006DAE"}

<!-- --- slide break --- -->

## What is Tidy Data? {.smaller}


:::{.callout-tip}

## Tidy Data Principles [^1]

1. Each variable must have its own column
2. Each observation must have its own row
3. Each value must have its own cell

:::

. . . 

So what about the ABS Census Data?

* The table header in fact contains information!
* E.g. <span class="monash-blue2">`F_400_499_15_19_yrs`</span> is female aged 15-19 years old who earn $400-499 per week (in Victoria).
* The number in the cells are the **counts**.
* Is the data tidy?


[^1]: Wickham (2014) Tidy Data. *Journal of Statistical Software* **59**

<!-- --- slide break --- -->

## Tidying the ABS 2021 Census Data {.smaller}

* Ideally we want the data to look like:

```{r, echo = FALSE}
# DT::datatable(tibble::tibble(age_min = 15, age_max = 19, gender = "female", 
#                              income_min = 400, income_max = 499, count = 4020),
#               rownames = FALSE, 
#               options = list(lengthChange = FALSE, dom = "t"))
data_example = data.frame(age_min = 15, age_max = 19, gender = "female",                               income_min = 400, income_max = 499, count = 4020)
head(data_example)
```

* Putting data into a tidy format makes the data analysis easier.

* You can include other information, e.g. geography code (useful if combining with other geographical area) or average age/income.

* Note some categories do not have upper bounds, e.g. [`M_3000_more_85ov`]{.monash-blue}. In R, `-Inf` and `Inf` are used to represent $-\infty$ and $\infty$, respectively.  

* You'll wrangle the data into the tidy form in tutorial  <i class="fas fa-wrench gray"></i>

* This will require getting the pieces of information from the column names and organising them using [string manipulation]{.monash-blue}.

<!-- --- slide break --- -->

# Manipulating strings {background-color="#006DAE"}

<!-- --- slide break --- -->

## Manipulating strings {.smaller}

* The `stringr`[^2] package provides a set of functions designed to help with string manipulation.

```{r}
library(tidyverse) # includes `stringr`
```

. . . 

* Main functions in `stringr` begin with the **prefix with `str_`**  and the first input into the functions is a string (or a vector of strings)

* What do you think `str_trim` and `str_squish` do?
```{r}
str_trim(c("    Apple ", "  Goji    Berry     "))
str_squish(c("    Apple ", "  Goji    Berry     "))
```

. . . 

* [Click here](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf) for a cheat sheet for `stringr` functions.

[^2]: Hadley Wickham (2019). stringr: Simple, Consistent Wrappers for Common String Operations. R package version 1.4.0.
  Gagolewski M. and others (2020). R package stringi: Character string processing facilities.

<!-- --- slide break --- -->

## Some other examples {.smaller}

These are `stringr` functions we'll need for our census application.

Splitting strings by a pattern:

```{r}
str_split(string = "Hi_everyone_in_ETC5512", pattern = "_")
```
Replacing parts of strings with a different pattern:

```{r}
str_replace(string = "we_want_fourwords", pattern = "rw", replace = "r_w")
```

Deleting parts of strings that aren't imporant: 

```{r}
str_remove(string = "we_want_to_remove_the_extra_stuff", pattern = "to_remove_the_extra_")
```

To get more control over the kinds of patterns we can match, we need regular expressions.

<!-- --- slide break --- -->

## Regular expressions [Part 1]{.font-small}

* **Regular expression**, or **regex**, is a string of characters that define a search pattern for text
* Regular expression is... hard, but comes up often enough that it's worth learning

```{r}
ozanimals <- c("koala", "kangaroo", "kookaburra", "numbat")
```

**Basic match**

::::{.columns}
:::{.column width=50%}
```{r}
str_detect(ozanimals, "oo")
str_extract(ozanimals, "oo")
```
:::

:::{.column width=50%}
```{r}
str_match(ozanimals, "oo")
```

:::

::::

<!-- --- slide break --- -->

## Regular expressions [Part 2]{.font-small}

**Meta-characters**

* `"."` a wildcard to match any character except a new line
```{r}
str_starts(c("color", "colouur", "colour", "red-column"), "col...")
```

. . . 

* `"(.|.)"` a marked subexpression with alternate possibilites marked with `|`
```{r}
str_replace(c("lovelove", "move", "stove", "drove"), "(l|dr|st)o", "ha")
```

. . . 

* `"[...]"` matches a single character contained in the bracket 
```{r}
str_replace_all(c("cake", "cookie", "lamington"), "[aeiou]", "_")
```

<!-- --- slide break --- -->

## Regular expressions [Part 3]{.font-small}

**Meta-character quantifiers**

* `"?"` zero or one occurence of preceding element
```{r}
str_extract(c("color", "colouur", "colour", "red"), "colou?r")
```

. . . 

* `"*"` zero or more occurence of preceding element
```{r}
str_extract(c("color", "colouur", "colour", "red"), "colou*r")
```

. . . 

* `"+"` one or more occurence of preceding element
```{r}
str_extract(c("color", "colouur", "colour", "red"), "colou+r")
```

<!-- --- slide break --- -->

## Regular expressions [Part 4]{.font-small}

* `"{n}"` preceding element is matched exactly `n` times
```{r}
str_replace(c("banana", "bananana", "bana", "banananana"), "ba(na){2}", "-")
```

. . . 

* `"{min,}"` preceding element is matched `min` times or more
```{r}
str_replace(c("banana", "bananana", "bana", "banananana"), "ba(na){2,}", "-")
```

. . . 

* `"{min,max}"` preceding element is matched at least `min` times but no more than `max` times
```{r}
str_replace(c("banana", "bananana", "bana", "banananana"), "ba(na){1,2}", "-")
```

<!-- --- slide break --- -->

## Regular expressions [Part 5]{.font-small} {.smaller}

**Character classes**

* `[:alpha:]` or `[A-Za-z]` to match alphabetic characters
* `[:alnum:]` or `[A-Za-z0-9]` to match alphanumeric characters
* `[:digit:]` or `[0-9]` or `\\d` to match a digit
* `[^0-9]` to match non-digits  
* `[a-c]` to match a, b or c
* `[A-Z]` to match uppercase letters
* `[a-z]` to match lowercase letters
* `[:space:]` or `[ \t\r\n\v\f]` to match whitespace characters
* and more...

<!-- --- slide break --- -->

## View matches with regular expressions 

```{r}
str_view(c("banana", "bananana", "bana", "banabanana"), "ba(na){1,2}")
```

```{r}
str_view_all(c("banana", "bananana", "bana", "banabanana"), "ba(na){1,2}")
```

. . . 

:::{.callout-tip}

* When a function in `stringr` ends with `_all`, all matches of the pattern are considered
* The one _without_ `_all` only considers the first match

:::

<!-- --- slide break --- -->

## Weird characters {.smaller}

Characters we use to define the regex, e.g. *,.,!,?,),] need to be defined differently when we are trying to match them.

This doesn't work:
```{r}
str_extract("Let's get the character and the brackets (A)", "([:alpha:])")
str_view("Let's get the character and the brackets (A)", "([:alpha:])")
```

But this does. 
```{r}
str_extract("Let's get the character and the brackets (A)", "\\([:alpha:]\\)" )
```
To match a bracket `(` we need to use `\\(` in stringr. 
It tells R we are looking for the bracket as part of the pattern and not to look for the backslash. The same goes for other special characters: 

<!-- --- slide break --- -->

# Back to Census {background-color="#006DAE"}

<!-- --- slide break --- -->

## Raw Data vs. Aggregated Data {.smaller}

* Although the data collected was from individual households, with each person in the household surveyed (see sample form [here](https://www.abs.gov.au/system/files/documents/12486ae64f0f0ea2d056ee6aa54adc34/Sample%202021%20Census%20Household%20Form%20%5B1.1MB%5D.pdf)), the downloaded data are [**aggregated**]{.monash-blue}.
* Aggregate data presents summary statistics from the [**raw data**]{.monash-blue}. 
*(e.g. a common summary statistic is the mean)*. 
* When the summary statistics are counts then it is often called [**frequency data**]{.monash-blue}.
* The raw data collected would be similar to the form

```{r, echo = FALSE}
DT::datatable(tibble::tibble(household_id = c(1, 1, 1, 1, 2, 2),
                             person = c("John Smith", "Jane Smith", "David Smith", "Mary Smith", "John Citizen", "Jane Citizen"),
                             gender = c("F", "M", "M", "F", "M", "F"),
                             age = c(40, 39, 10, 8, 32, 33),
                             maritial_status = c("Married", "Married", "Never married", "Never married", "Never married", "Never married"),
                             income_per_week = c("400-499", "300-399", "Nil", "Nil", "400-499", "1750-1999")),
              rownames = FALSE,
              options = list(lengthChange = FALSE, dom = "t"))
```

<!-- --- slide break --- -->

## What you lose in aggregate data

* For aggregate data, there are less scope for you to draw insights conditioned on other variables.   
* *e.g. Based on frequency data alone, you cannot answer questions like: How many middle income families have 2 children?*
* Raw data are desirable if you can get hold of it!


## Trust and skepticism

:::{.incremental}

* By the way, did you notice anything odd about the dummy data presented in the last slide?
* John Smith was recorded as female and Jane Smith as male. Data may have been incorrectly recorded. 
* How much do you trust the aggregate data?
* Remember to have a healthy dose of skepticism in your data.

:::

<!-- --- slide break --- -->

## Data Confidentiality

* The data is not just aggregated, but it is also [anonymised]{.monash-blue}
* E.g. in [`2021_GCP_Sequential_Template_R2.xlsx`]{.monash-blue}, Sheet "G17", footnote says "*Please note that there are **small random adjustments** made to all cell values to protect the confidentiality of data. These adjustments may cause the sum of rows or columns to differ by small amounts from table totals.*"

. . . 

:::{.callout-tip}
## Curious

Do you think that you'll get the same numbers if you aggregate different geographical regions? E.g. `SA1` and `STE`. 
:::

. . . 

* You can check this in the tutorial 🔧

<!-- --- slide break --- -->

# Wrap UP {background-color="#006DAE"}

## Summary

::: callout-note
## Australian Census Case Study

::: incremental

* We went through how to find and understand the data available in the 2021 Australian census.

* Learnt about census data collection and data limitations. 

* Taste of detective work: Understanding the file structures and what the data contains.

* Also learnt about tidy data

* Covered the basics of string manipulation

:::

:::

<!-- --- slide break --- -->

## Answers {.smaller}

::: callout-tip 
## Break out questions 

* Which folder contains demographic information about each suburb?  
*In the file `2021AboutDataPacks_readme.txt` you find out that folders represent different geographical sub-regions. SAL represents suburbs and locaties and in the previous census this was called SSC.* 

* What is LGA short for?    
*Local Government Areas*

* Where can I find information about how much rent people pay? 

*In the file `2021_GCP_Sequential_Template_R2` there is a list of variables and what is contained in each table. G40 contains the rental information (organised by landlord type).*

* What is contained in variable G17?  

*G17 contains information about the total personal income organised by age and sex.*

:::

<!-- --- slide break --- -->     

# More String Manipulation  {background-color="#006DAE"}

## [Case study <i class="fas fa-search-plus"></i>]{.orange} Aussie Local Government Area [^3] {.smaller}

```{r}
LGA <- ozmaps::abs_lga |> pull(NAME)
LGA[1:7]
```

<center>

<table class="table table-bordered" style="width:90%">
  <tr>
    <td>C = Cities</td>
    <td>A = Areas</td>
    <td>RC = Rural Cities</td>
    
  </tr>
  <tr>
    <td>B = Boroughs</td>
    <td>S = Shires</td>
    <td>DC = District Councils</td>
  </tr>
  <tr>
    <td>M = Municipalities</td>
    <td>T = Towns</td>
    <td>AC = Aboriginal Councils </td>
  </tr>
  <tr>
  <td>RegC = Regional Councils</td>
  </tr>
</table>
</center>

<br>

<center>

🎯 **Extract the LGA status from the LGA names**

</cemter>

. . . 

<center>
How?
</center>

[^3]: Michael Sumner (2020). ozmaps: Australia Maps. R package version 0.3.6. 

<!-- --- slide break --- -->

## Extracting the string

```{r}
str_extract(LGA, "\\(.+\\)") 
```

##     

:::{.callout-important}

:::{.incremental}

* What is `"\\(.+\\)"`???
* This is a pattern expressed as **regular expression** or **regex** for short
* Note in R, you have to add an extra `\` when  `\` is included in the pattern _(yes this means that you can have a lot of backslashes... just keep adding `\` until it works! Enjoy [this xkcd comic](https://xkcd.com/1638/)
* From R v4.0.0 onwards, you can use raw string to elimiate all the extra `\`, e.g. `(\(.+\)` is the same as `\\(.+\\)`

:::

:::

<!-- --- slide break --- -->

## [Back to]{.font_small} Extracting the string {auto-animate="true"}

```{r}
str_extract(LGA, "\\(.+\\)")
```

<!-- --- slide break --- -->

## [Back to]{.font_small} Extracting the string

```{r}
str_extract(LGA, "\\(.+\\)") |> 
  table()
```

. . . 

<blockquote>
Where the same Local Government Area name appears in different States or Territories, the State or Territory abbreviation appears in parenthesis after the name. Local Government Area names are therefore unique.<br>
<a href="https://www.abs.gov.au/ausstats/abs@.nsf/Lookup/by%20Subject/1270.0.55.003~June%202020~Main%20Features~Local%20Government%20Areas%20(LGAs)~3" style="float:right">-Australian Bureau of Statistics</a>
</blockquote>

<!-- --- slide break --- -->

## [Retry]{.font_small} Extracting the string {auto-animate=true}

```{r}
str_extract(LGA, "\\([^)]+\\)") |> 
  table()
```

<!-- --- slide break --- -->

## [Retry]{.font_small} Extracting the string {auto-animate=true}

```{r}
str_extract(LGA, "\\([^)]+\\)") |> 
  # remove the brackets
  str_replace_all("[\\(\\)]", "") |> 
  table()
```

* `"[]"` for single character match
* We want to match `(` and `)` but these are meta-characters
* So we need to escape it to have it as a literal: `\(` and `\)`
* But we must escape the escape character... so it's actually `\\(` `\\)`


<!-- --- slide break --- -->

## Extracting the string in R>=4.0.0

<!-- The below exists in raw html to highlight parts of the code with a yellow color -->

<pre>
<code class="r hljs remark-code">
<div class="remark-code-line">str_extract(LGA, <span style="background-color:yellow">r<span class="hljs-string">"(</span></span><span class="hljs-string">\([^)]+\)<span style="background-color:yellow">)"</span></span>) %&gt;% </div>
<div class="remark-code-line">  <span class="hljs-comment"># remove the brackets</span></div>
<div class="remark-code-line">  str_replace_all(<span style="background-color:yellow">r<span class="hljs-string">"(</span></span><span class="hljs-string">[\(\)]<span style="background-color:yellow">)"</span></span>, <span class="hljs-string">""</span>) %&gt;% </div>
<div class="remark-code-line">  table()</div>
</code>
</pre>
<pre>
<code class="r hljs remark-code"><div class="remark-code-line"><span class="hljs-comment">## .</span></div>
<div class="remark-code-line"><span class="hljs-comment">##    A   AC    B    C   DC    M    R   RC RegC    S    T </span></div>
<div class="remark-code-line"><span class="hljs-comment">##  100    2    1  125   41   27   39    7    1  183   12</span></div>
</code>
</pre>


* If using R v4.0.0 onwards, you can use the raw string version instead


